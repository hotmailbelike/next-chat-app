// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId()
  email         String       @unique
  emailVerified DateTime?
  name          String
  password      String?
  role          Role         @default(MEMBER)
  image         String?

  accounts      Account[]
  sessions      Session[]
  messages      Message[]
 
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId()
  content   String
  groupId   String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
}

model Group {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId()
  name     String   @unique
  messages Message[]
}

// Enum for roles
enum Role {
  ADMIN
  MEMBER
}

 

 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}